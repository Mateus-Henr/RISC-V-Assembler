Instructions to be implemented

ADD (Add)
Type: R
Opcode: 0110011
Funct3: 000
Funct6/7: 0000000

SUB (Subtract)
Type: R
Opcode: 0110011
Funct3: 000
Funct6/7: 0100000

AND (Bitwise AND)
Type: R
Opcode: 0110011
Funct3: 111
Funct6/7: 0000000

OR (Bitwise OR)
Type: R
Opcode: 0110011
Funct3: 110
Funct6/7: 0000000

XOR (Bitwise XOR (Exclusive-OR))
Type: R
Opcode: 0110011
Funct3: 100
Funct6/7: 0000000

SLL (Logical Shift Left)
Type: R
Opcode: 0110011
Funct3: 001
Funct6/7: 0000000

SRL (Logical Shift Right (0-extended))
Type: R
Opcode: 0110011
Funct3: 101
Funct6/7: 0000000

ADDI (Add Immediate)
Type: I
Opcode: 0010011
Funct3: 000
Funct6/7: n.a.

ANDI (Bitwise AND Immediate)
Type: I
Opcode: 0010011
Funct3: 111
Funct6/7: n.a.

ORI (Bitwise OR Immediate)
Type: I
Opcode: 0010011
Funct3: 110
Funct6/7: n.a.


Additional ones

LD (Load doubleword) - Doubleword from memory to register
Type: I
Opcode: 0000011
Funct3: 011
Funct6/7: n.a.

SD (Store doubleword) - Doubleword from register to memory
Type: S
Opcode: 0100011
Funct3: 111
Funct6/7: n.a.

LW (Load word) - Word from memory to register
Type: I
Opcode: 0000011
Funct3: 010
Funct6/7: n.a.

LWU (Load word, unsigned) - Unsigned word from memory to register
Type: I
Opcode: 0000011
Funct3: 110
Funct6/7: n.a.

SW (Store word) - Word from register to memory
Type: S
Opcode: 0100011
Funct3: 010
Funct6/7: n.a.

LH (Load halfword) - Halfword from memory to register
Type: I
Opcode: 0000011
Funct3: 001
Funct6/7: n.a.

LHU (Load halfword, unsigned) - Unsigned halfword from memory to register
Type: I
Opcode: 0000011
Funct3: 101
Funct6/7: n.a.

SH (Store halfword) - Halfword from register to memory
Type: S
Opcode: 0100011
Funct3: 001
Funct6/7: n.a.

LB (Load byte) - Byte from memory to register
Type: I
Opcode: 0000011
Funct3: 000
Funct6/7: n.a.

LBU (Load byte, unsigned) - Byte unsigned from memory to register
Type: I
Opcode: 0000011
Funct3: 100
Funct6/7: n.a.

SB (Store byte) - Byte from register to memory
Type: S
Opcode: 0100011
Funct3: 000
Funct6/7: n.a.

LR.D (Load reserved) - Load; 1st half of atomic swap
Type: R
Opcode: 0110011
Funct3: 011
Funct6/7: 0001000

SC.D (Store conditional) - Store; 2nd half of atomic swap
Type: R
Opcode: 0110011
Funct3: 011
Funct6/7: 0001100

LUI (Load upper immediate) - Loads 20-bit constant shifted left
Type: U
Opcode: 0110111
Funct3: n.a.
Funct6/7: n.a.



Types

R-Type
funct7   rs2      rs1      funct3   rd       opcode
7 bits   5 bits   5 bits   3 bits   5 bits   7 bits

I-Type
IMM       rs1      funct3   rd       opcode
12 bits   5 bits   3 bits   5 bits   7 bits

S-Type
IMM      rs2      rs1      funct3   IMM      opcode
7 bits   5 bits   5 bits   3 bits   5 bits   7 bits

U-Type
IMM       rd       opcode
20 bits   5 bits   7 bits



Pseudo instructions to be implemented
nop 		addi x0, x0, 0   (No operation)
mv rd, rs	addi rd, rs, 0   (Copy register)
neg rd, rs	sub rd, x0, rs   (Two's complement)
li          addi x0, x0, 0   (Load immediate)



Number bases to be implemented
- Binary.
- Decimal.
- Hexadecimal.
